using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Diagnostics;


namespace TICS.Tools
{
    public class PDFWriter
    {
        /// <summary>
        /// Exports async the txt to PDF
        /// </summary>
        /// <param name="txtFilePath">file path for the txt</param>
        /// <param name="pdfFilePath">file path for the pdf file</param>
        /// <returns>Returns task for threading</returns>
        public static async Task ExportTextToPdfAsync(string txtFilePath, string pdfFilePath)
        {
            await Task.Run(async () =>
            {
                try
                {
                    // Create iTextSharp document
                    Document document = new Document(PageSize.A4);

                    using (var memoryStream = new MemoryStream())
                    {
                        PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);
                        writer.CompressionLevel = PdfStream.NO_COMPRESSION; // Disable compression

                        document.Open();

                        // Read text file content asynchronously
                        using (var fs = new FileStream(txtFilePath, FileMode.Open, FileAccess.Read))
                        using (var sr = new StreamReader(fs))
                        {
                            string line;
                            while ((line = await sr.ReadLineAsync()) != null)
                            {
                                var paragraph = new Paragraph(line);
                                document.Add(paragraph);
                            }
                        }

                        document.Close();

                        // Move the position to the beginning of the stream after closing the document
                        byte[] pdfBytes = memoryStream.ToArray();

                        using (var fileStream = new FileStream(pdfFilePath, FileMode.Create, FileAccess.Write))
                        {
                            fileStream.Write(pdfBytes, 0, pdfBytes.Length);
                        }
                    }

                    Debug.WriteLine("PDF EXPORTED");
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("Error: " + ex.StackTrace);
                }
            });
        }
    }
}
