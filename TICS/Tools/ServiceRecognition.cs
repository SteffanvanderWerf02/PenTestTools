using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace TICS.Tools
{
    public class ServiceRecognition
    {
        /// <summary>
        /// Recieve service information for HTTP service
        /// </summary>
        /// <param name="tcpClient"> TCP Client that is connected</param>
        /// <returns>returns service information</returns>
        public static async Task<string> GetHttpService(TcpClient tcpClient)
        {
            // Implement service version detection logic for TCP
            try
            {

                NetworkStream stream = tcpClient.GetStream();
                byte[] data = Encoding.ASCII.GetBytes("GET / HTTP/1.1\r\n\r\n");

                // Send the request
                await stream.WriteAsync(data);

                // Read the response
                byte[] responseBuffer = new byte[4096];
                int bytesRead = await stream.ReadAsync(responseBuffer, 0, responseBuffer.Length);
                string response = Encoding.ASCII.GetString(responseBuffer, 0, bytesRead);

                if (response.Contains("Server:"))
                {
                    int startIndex = response.IndexOf("Server:") + "Server:".Length;
                    int endIndex = response.IndexOf("\r\n", startIndex);
                    string serverHeader = response[startIndex..endIndex].Trim();
                    return serverHeader;
                }
                else
                {
                    return "Unknown service";
                }
            }
            catch (Exception ex)
            {
                return "Error: " + ex.Message;
            }
        }

        /// <summary>
        /// Recieves information from mysql server
        /// </summary>
        /// <param name="client">TCP client that connects to mysql server</param>
        /// <returns>returns service information</returns>
        public static async Task<string> GetMySQLServerVersion(TcpClient client)
        {
            string version = "";
            try
            {
                NetworkStream stream = client.GetStream();

                // Creates a buffer for holding bytes, reads and stores the network stream data in the buffer.
                byte[] buffer = new byte[1024];
                int readBytes = await stream.ReadAsync(buffer);

                // Executes if data is read.
                if (readBytes > 0)
                {
                    // Decodes the bytes from the array to a string.
                    string networkResponse = Encoding.ASCII.GetString(buffer, 0, readBytes);
                    // Splits the string on the linebreak character, gets the second string in the array, splits that string on a space character and gets the first string from that array.
                    version = networkResponse.Split('\n')[1].Split(' ')[0];
                    // Gets the index of the position of the null byte (0x00)
                    int nullIndex = version.IndexOf('\0');
                    if (nullIndex != -1)
                    {
                        // Gets the part of the string up until the null byte.
                        version = version.Substring(0, nullIndex);
                    }
                }
                // Closes the stream and the client.
                stream.Close();
                client.Close();

                return version;

            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Fout: {ex.Message}");
                return "unknown";
            }

        }

        /// <summary>
        /// gets the service information for an FTP server 
        /// </summary>
        /// <param name="tcpClient"> TCP client that connects to FTP server</param>
        /// <returns>returns service information for FTP</returns>
        public static async Task<string?> GetFTPService(TcpClient tcpClient)
        {
            try
            {
                // Opens a network stream.
                NetworkStream networkStream = tcpClient.GetStream();
                // Create a streamreader object with the network stream.
                StreamReader streamReader = new(networkStream);
                // Reads the first line of the stream and returns this line.
                string? information = await streamReader.ReadLineAsync();

                tcpClient.Close();
                return information;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        /// <summary>
        /// Gets service information from SSH
        /// </summary>
        /// <param name="client"> TCP client that connects to SSH server</param>
        /// <returns></returns>
        public static async Task<string> GetSshServiceInfo(TcpClient client)
        {
            try
            {
                NetworkStream stream = client.GetStream();

                // Read the initial SSH protocol banner
                byte[] buffer = new byte[256];
                int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                string sshBanner = Encoding.ASCII.GetString(buffer, 0, bytesRead);

                // Determine the service and version from the banner

                string version = sshBanner.Split('-')[0].Split('_')[0];

                // Get the port state
                string portState = client.Connected ? "open" : "closed";

                string serviceInfo = $"{sshBanner} state: {portState}";

                client.Close();

                return serviceInfo;
            }
            catch (Exception ex)
            {
                return $"Error: {ex.Message}";
            }
        }

        /// <summary>
        /// Gets the service information from a port with NMAP
        /// </summary>
        /// <param name="target">Target that needs to be scanned</param>
        /// <param name="port"> The port that needs to be scanned</param>
        /// <returns>returns information over the service running on the port using NMAP</returns>
        public static async Task<string?> GetServiceWithNmap(string target, string port)
        {
            try
            {
                ProcessStartInfo processStartInfo = new()
                {
                    FileName = "nmap",
                    Arguments = $"{target} -p {port} -sV",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                Process process = new() { StartInfo = processStartInfo };
                process.Start();

                string output = await process.StandardOutput.ReadToEndAsync();
                await process.WaitForExitAsync();

                string? service = ParseServiceInfo(output, port);
                return service;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Gets from output string the service information
        /// </summary>
        /// <param name="output">long string for with service information</param>
        /// <param name="port">Port that is scanned</param>
        /// <returns>returns the service information from long string</returns>
        private static string? ParseServiceInfo(string output, string port)
        {
            // The keyword to look for
            string keyword = $"{port}/tcp open";
            // Finds the index of the keyword
            int index = output.IndexOf(keyword);
            // If the keyword is found
            if (index != -1)
            {
                // Find the linebreak after the keyword.
                int lineBreakIndex = output.IndexOf("\n", index + keyword.Length);
                // If the linebreak is found.
                if (lineBreakIndex != -1)
                {
                    // Gets the part of the sentence from after tcp open until the linebreak.
                    string result = output.Substring(index + keyword.Length, lineBreakIndex - (index + keyword.Length)).Trim();
                    return result;
                }
                else
                {
                    // Gets the entire sentence from after tcp open
                    return output.Substring(index + keyword.Length).Trim();
                }
            }
            else
            {
                // If the keyword is not found, return null or handle the error accordingly
                return null;
            }
        }
    }
}
